what, Why, How ?

What is Angular :
1)SPA 
2)Framework
3)JS Framework
4)Speeds up the deployment 
5)It is written in TypeScript 

Typescript :Superset of JS -- JS +oops 
-Convert into JS only after compilation
-tsc filename.ts


Angular is JS Framework which is used for building SPA Applications using TypeScipt+HTML/CSS
Angular is Dynamic 

- Front End applications
-SPA Applications 
-MPA Applications 

SPA : Are web applications only that will load a single HTML Page and will dynamically load the resources that is requested from the server on that page only.

How the angular applications :
To create a Angular application, we can use Angular CLI
 ng new my-app

npm : node package manager 

Development Environment: Developimg s/w -Configuration of our machine
Production Environment  : When deploying product to the client side 

index.html: First page to render the browse 
main.ts : first typescript file to be executed in Angular app 

polyfills.ts - > keep configugutaion so that your angular app can be compatible with old browsers


angular.json : this file will keep configuartion related to angular application.

Package.json : This file will keep details about packages and dependencies of application . 

tsconfig: typescript compilor configuration
tsconfig.app.json : It contains typescript configuration for applicaton

index.html
app-routing : to maintain routes in angular app, we use this file.

component : basic building block for angular applicatio. Each component consists of following files :

app.component.css :   style sheet 
app.component.html:    Designing 
app.component.spec.ts: Testing files 
app.component.ts     : Logical file for app component 
app.module.ts       

herocomponent
Logincomponent
Autjorizationcomponent 


index.html
about.html
contact.html

ng generate component demo-- To generate component
ng serve - To execute angular app
ng new applicationname--to create angular app

index.html->app component ->demo component 

Property Binding - Interpolation {{}}
Event Binding : ()
One-way binding  : Component-View /View-component 
Two-way binding : [()]
Attribute Binding  []

<h1 [innerText]="title"></h1>



1)Create an interface hero.ts
export interface Hero
{
    id:number;
    name:string;
}
2)Go to hero.component.ts - import { Hero } from '../hero';

in hero.compoenent.ts 
 hero:Hero={
    id:101,
    name:'John'
  };

3)hero.component.html->
{{hero.id}}
{{hero.name}}

Two way binding :
1)go to hero.component.html->
Name: <input [(ngModel)]="hero.name" placeholder="Hero name"/>

An error will occured, to resolve that error:
app.module.ts ->import { FormsModule } from '@angular/forms';
imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule
  ],


Angular Directive : 

*ngIf
*ngFor 

<p>hero works!</p>
<h1>Hero Data </h1>
{{hero.id}}
{{hero.name | uppercase}}
Name: <input [(ngModel)]="hero.name" placeholder="Hero name"/>
<div>
    <ul>
        <li *ngFor ="let hero1 of heroes">
            {{hero1.id}}   &nbsp; {{hero1.name}}
        </li>
    </ul>
</div>


import { Component, OnInit } from '@angular/core';
import { Hero } from '../hero';
import {HEROES} from '../mock-heores';
@Component({
  selector: 'app-hero',
  templateUrl: './hero.component.html',
  styleUrls: ['./hero.component.css']
})
export class HeroComponent implements OnInit {
  heroes=HEROES;
  hero:Hero={
    id:101,
    name:'Gaurav'
  };
  constructor() { }
  ngOnInit(): void {
  }
}

export interface Hero
{
    id:number;
    name:string;
}

import {Hero}from './hero';
export const HEROES:Hero[]=[
    {id:1,name:"Shashank"},
    {id:2,name:"Sonu"},
    {id:3,name:"Ankur"}
];














